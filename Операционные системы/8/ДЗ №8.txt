ЗАДАНИЕ:
1)Какие плюсы у эмуляции?
2)Что такое паравиртуализация?
3)Что такое JVM?
4)Что такое язык низкого уровня?

РЕШЕНИЕ:
1)Существуют различные типы эмуляторов, в которых используются различные методы эмуляции, но конечная цель всегда одна и та же: воспроизвести как можно точней опыт 
использования оригинального оборудования или программного обеспечения. К достоинствам можно отнести:
a)гибкость. Один из самых частых видов эмуляции - это вид, в котором воспроизводится только архитектура компьютера. Можно программно сэмулировать любую компьютерную
архитектуру на любой архитектуре.
b)аппаратные платформы, которые ещё не реализованные физически, исследуются с помощью механизмов эмуляции, что позволяет разрабатывать алгоритмы и программы.
c)финансовая составляющая, отпадает необходимость в покупке оборудования. Аналогично с программным ПО, если его нужно запустить на другой архитектуре/ОС.
d)многие эмуляторы разработаны и доступны под лицензией GNU General Public License как открытое программное обеспечение.
2)Если для виртуализации требуется изменение ядра гостевой операционной системы, такой подход называется паравиртуализацией. Вместо обращения к оборудованию гостевая система  использует системные вызовы операционной системы хоста. Примеры: Xen и его ответвления (Citrix XenServer, XCP). 
3)JVM(Java Virtual Machine) — это ключевой компонент платформы Java, который загружает, проверяет и выполняет код. Задачей Java-разработчиков было создание переносимых 
приложений и JVM в данном случае играет основную роль с точки зрения переносимости, так как именно она обеспечивает необходимый уровень абстракции между скомпилированной
Java-программой, базовой аппаратной платформой и ОС. Так как виртуальные машины Java доступны для многих аппаратных и программных платформ, то везде (где есть JVM) мы 
можем запускать Java-приложения (принцип — скомпилируй единожды, запускай везде).
4)Язык программирования низкого уровня — язык программирования, близкий к программированию непосредственно в машинных кодах используемого процессора. Созданы для
удовлетворения нужд конкретной компьютерной архитектуры и учитывают требования "железа". Программы, написанные на низкоуровневых языках, являются более быстрыми, чем
написанные на средне или высокоуровневых языках, т.к.  эти программы не нуждаются в интерпретации или компиляции. Они взаимодействуют непосредственно с регистрами и памятью.
