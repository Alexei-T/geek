ЗАДАНИЕ:
1)Создать программно файл в текстовом формате, записать в него построчно данные, вводимые пользователем. Об окончании ввода данных свидетельствует пустая строка.
2)Создать текстовый файл (не программно), сохранить в нем несколько строк, выполнить подсчет количества строк, количества слов в каждой строке.
3)Создать текстовый файл (не программно), построчно записать фамилии сотрудников и величину их окладов (не менее 10 строк). Определить, кто из сотрудников имеет оклад 
менее 20 тыс., вывести фамилии этих сотрудников. Выполнить подсчет средней величины дохода сотрудников.
Пример файла:
Иванов 23543.12
Петров 13749.32
4)Создать (не программно) текстовый файл со следующим содержимым:
One — 1
Two — 2
Three — 3
Four — 4
Необходимо написать программу, открывающую файл на чтение и считывающую построчно данные. При этом английские числительные должны заменяться на русские. Новый блок строк
должен записываться в новый текстовый файл.
5)Создать (программно) текстовый файл, записать в него программно набор чисел, разделенных пробелами. Программа должна подсчитывать сумму чисел в файле и выводить ее на
экран.
6)Необходимо создать (не программно) текстовый файл, где каждая строка описывает учебный предмет и наличие лекционных, практических и лабораторных занятий по этому 
предмету и их количество. Важно, чтобы для каждого предмета не обязательно были все типы занятий. Сформировать словарь, содержащий название предмета и общее количество 
занятий по нему. Вывести словарь на экран.
Примеры строк файла: Информатика: 100(л) 50(пр) 20(лаб).
Физика: 30(л) — 10(лаб)
Физкультура: — 30(пр) —
Пример словаря: {“Информатика”: 170, “Физика”: 40, “Физкультура”: 30}
7)Создать вручную и заполнить несколькими строками текстовый файл, в котором каждая строка должна содержать данные о фирме: название, форма собственности, выручка,
издержки.
Пример строки файла: firm_1 ООО 10000 5000.
Необходимо построчно прочитать файл, вычислить прибыль каждой компании, а также среднюю прибыль. Если фирма получила убытки, в расчет средней прибыли ее не включать.
Далее реализовать список. Он должен содержать словарь с фирмами и их прибылями, а также словарь со средней прибылью. Если фирма получила убытки, также добавить ее в 
словарь (со значением убытков).
Пример списка: [{“firm_1”: 5000, “firm_2”: 3000, “firm_3”: 1000}, {“average_profit”: 2000}].
Итоговый список сохранить в виде json-объекта в соответствующий файл.
Пример json-объекта:
[{"firm_1": 5000, "firm_2": 3000, "firm_3": 1000}, {"average_profit": 2000}]
Подсказка: использовать менеджер контекста.

РЕШЕНИЕ:
1)
with open("new.txt", "w", encoding="utf-8") as file_obj:
    while True:
        string = input("Введите текст. Для выхода введите пустую строку: ")
        if string == "":
            break
        print(string, file=file_obj)
________________________________________________________________________________________________________________________________________________________________________
2)
filename = input("Введите имя существующего файла из которого нужно прочитать данные : ")
file = open(filename, "r", encoding="utf-8")
lines = file.readlines()
words = 0
for line_in_file in lines:
    words += len(line_in_file.split())
print(f"В вашем файле строк = {len(lines)} \nВ вашем файле слов = {words}")
file.close()
________________________________________________________________________________________________________________________________________________________________________
3)
import sys

filename = input("Введите имя существующего файла из которого нужно прочитать данные : ")
min_salary = 20000
if __name__ == "__main__":
    try:
        with open(filename, encoding='utf-8') as file_obj:
            employees = file_obj.readlines()
    except IOError as e:
        print(e)
        sys.exit(1)
    summ_salary = 0
    for employee in employees:
        name, salary = employee.split()
        try:
            salary = float(salary)
        except ValueError:
            continue
        summ_salary += salary
        if salary < min_salary:
            print(name)

    print('Средняя ЗП: ', round(summ_salary / len(employees), 1))
________________________________________________________________________________________________________________________________________________________________________
4)
import sys

file_in = input("Введите имя существующего файла для чтения: ")
file_out = input("Введите имя нового файла для записи: ")
dictionary = {
    'One': 'Один',
    'Two': 'Два',
    'Three': 'Три',
    'Four': 'Четыре'
}
if __name__ == "__main__":
    try:
        with open(file_in, 'r', encoding='utf-8') as file_read:
            lines = file_read.readlines()
    except IOError as e:
        print(e)
        sys.exit(1)
with open(file_out, 'a', encoding='utf-8') as file_write:
    for line in lines:
        row = line.split()
        row[0] = dictionary[row[0]]
        print(' '.join(row), file=file_write)
________________________________________________________________________________________________________________________________________________________________________
5)
def summary():
    try:
        with open("out.txt", "w+") as file_obj:
            line = input("Введите цифры через пробел \n")
            file_obj.writelines(line)
            my_numb = line.split()
            print(sum(map(int, my_numb)))
    except ValueError:
        print("Введены не цифры")
summary()
________________________________________________________________________________________________________________________________________________________________________
6)
result = {}
with open("6.txt", encoding="utf-8") as f_obj:
    for line in f_obj:
        lesson_time = []
        lessons = ([el for el in line.split(" ")])
        for el in lessons:
            lesson_time.append(''.join(i for i in list(el) if i.isdigit()))
        result[line.split(':')[0]] = sum([int(i) for i in lesson_time if i.isdigit()])
print(result)
